<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<definition>
    <body><![CDATA[<?php

class %BASECLASSNAME% extends dbPeer
{
    protected	$instance		= 	false;
    protected	static $alias 	=	'%CONNECTION%';

    protected	$tableName		=	'%TABLENAME%';
    protected	$primaryKey		=	%PRIMARYKEY%;
    protected	$primaryTKey	=	%PRIMARYTKEY%;
    protected	$primaryOKey	=	%PRIMARYOKEY%;
    protected	$primaryCKey	=	%PRIMARYCKEY%;

	protected	$fields			=	array(%FIELDS%);
    protected	$primaryBind	=	"%PRIMARYBIND%";
    protected	$multiPrimary	=	%MULTIPRIMARY%;

    public static function setKey( $key )
    {
        return dbPeer::getInstance('%CLASSNAME%')->doSetKey( $key );
    }

    /**
     * get full row from table
     *
     * @param integer $primaryKey
     * @return array
     */
    public static function  row( $primaryKey, $alias = false )
    {
    	$alias =	$alias ? $alias : self::$alias;
        return dbPeer::getInstance('%CLASSNAME%')->doRow( $primaryKey, $alias );
    }

    /**
     * get full rows from table
     *
     * @param integer $primaryKey
     * @return array
     */
    public static function  rows( $primaryKeys, $alias = false )
    {
    	$alias =	$alias ? $alias : self::$alias;
        return dbPeer::getInstance('%CLASSNAME%')->doRows( $primaryKeys, $alias );
    }

    /**
     * get array of primary keys
     *
     * @param array $where
     * @param array $bind
     * @param array $order
     * @param array $limit
     * @return array
     */
    public static function  cols( 	$where = array(),
    								$order = array(),
    								$limit = false,
    								$offset = false,
    								&$total = false,
    								&$more = false,

									$fields 	=	false,
									$selectSql	=	false,
									$fromSql	=	false,

    								$alias = false )
    {
    	$alias =	$alias ? $alias : self::$alias;

        return dbPeer::getInstance('%CLASSNAME%')->doCols(
        	$where,
        	$order,
        	$limit,
        	$offset,
        	$total,
        	$more,

			$fields,
			$selectSql,
			$fromSql,

        	$alias);
    }


    /**
     * insert row
     *
     * @param array $data
     * @return integer
     */
    public static function  insert( $data, $multi = false, $ignore = false, $alias = false )
    {
    	$alias =	$alias ? $alias : self::$alias;
        return dbPeer::getInstance('%CLASSNAME%')->doInsert( $data, $multi, $ignore, $alias );
    }


    /**
     * Replace row
     *
     * @param array $data
     * @return integer
     */
    public static function  replace( $data, $multi = false, $alias = false )
    {
    	$alias =	$alias ? $alias : self::$alias;
        return dbPeer::getInstance('%CLASSNAME%')->doReplace( $data, $multi, $alias );
    }


    /**
     * update row by primary key
     *
     * @param integer $id
     * @param array $data
     * @return boolean
     */
    public static function  update($id,  $data, $alias = false)
    {
    	$alias =	$alias ? $alias : self::$alias;
        return dbPeer::getInstance('%CLASSNAME%')->doUpdate($id,  $data, $alias);
    }

    /**
     * delete row
     *
     * @param integer $primaryKey
     */
    public static function  delete( $primaryKey, $alias = false )
    {
    	$alias =	$alias ? $alias : self::$alias;
        return dbPeer::getInstance('%CLASSNAME%')->doDelete( $primaryKey, $alias );
    }

	static function setMeta($id, $values, $mode = 'override', $alias = false)
	{
    	$alias =	$alias ? $alias : self::$alias;
		$item		=	dbPeer::getInstance('%CLASSNAME%')->doRow($id, $alias);
		$meta		=	$item['meta'];

		foreach ($values as $key => $value)
		{
			if ($meta[$key] && is_array($meta[$key]))
			{
				if ($mode == 'merge')
				{
					$meta[$key]	=	aql::merge($meta[$key], $value);
				}
				else
				{
					$meta[$key]	=	$value;
				}
			}
			else
			{
				$meta[$key]	=	$value;
			}
		}

		dbPeer::getInstance('%CLASSNAME%')->doUpdate($id, array('meta' => json_encode($meta)), $alias);
	}

	static function getMeta($id, $key, $item = false, $alias = false)
	{
    	$alias =	$alias ? $alias : self::$alias;

		if (!$item)
		{
			$item	=	dbPeer::getInstance('%CLASSNAME%')->doRow($id, $alias);
		}

		if ($item['meta'])
		{
			return $item['meta'][$key];
		}

		return false;
	}


}

]]>
    </body>
</definition>
